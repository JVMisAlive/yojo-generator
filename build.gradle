plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}

java {
    withJavadocJar()
    withSourcesJar()
}

group 'ru.yojo'
version '1.0.0'

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "yojo-generator"
            groupId = "ru.yojo.codegen"
            version = "0.0.1"
            from components.java
            pom {
                packaging = "jar"
                name.set("YOJO Generator Core")
                url.set("https://github.com/JVMisAlive/yojo-generator")
                description.set("This is Core of YOJO")

                licenses {
                    license {
                        name.set("The Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }

                scm {
                    connection.set("scm:https://github.com/JVMisAlive/yojo-generator.git")
                    developerConnection.set("scm:git@github.com:JVMisAlive/yojo-generator.git")
                    url.set("https://github.com/JVMisAlive/yojo-generator.git")
                }

                developers {
                    developer {
                        id.set("YOJO")
                        name.set("Vladimir Morozkin")
                        email.set("jvmorozkin@gmail.com")
                    }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

//Uncomment this if you need to test by YojoCLI
//sourceSets {
//    main {
//        java {
//            srcDir "${buildDir}/generated-sources"
//        }
//    }
//}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'ru.yojo.codegen'
    mainClass = 'ru.yojo.codegen.YojoCLI'
}

mainClassName = "ru.yojo.codegen.YojoCLI"

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
    zip64 = true
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}

dependencies {
    implementation 'org.springframework:spring-context:5.3.25'
    implementation 'org.yaml:snakeyaml:2.0'
    //implementation 'javax.validation:validation-api:2.0.1.Final'
    //compileOnly 'org.projectlombok:lombok:1.18.26'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.10'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
}

test {
    useJUnitPlatform()
}